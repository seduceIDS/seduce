ABOUT
-----
SEDUCE stands for "ShellcodE Detection Using CPU Emulation". 

SEDUCE is a tiny Network Intrusion Detection System (NIDS) that reports alerts
to a Prelude SIEM system (see https://www.prelude-siem.org/). 

The project was initially developed by Nikos Skalkotos, Haris Andrianakis, 
Spyros Panagiotopoulos and Dimitrios Glynos as part of their thesis work
at the University of Piraeus. Development started in 2006 and was paused in 
2010, however recent academic interest in final-year-project work on SEDUCE 
contributed to a revival in 2021. During this time Katerina Androni developed
a yara-based signature detection engine for her Final Year Project, 
while in 2023 Dimitris Tsilis developed a win32 shellcode detection 
engine (based on the unicorn2 emulation framework) for his MSc thesis.

The 'master' repo branch follows a simple design with 'agent' and 'sensor'
nodes, where the agent nodes carry out the packet analysis and the
sensor nodes carry out the traffic collection. The '3-tier-arch' is a somewhat
older branch that introduces a central "manager" node that passes job units to
agents.

SEDUCE detection capabilities vary depending on the built-in detection engines.
Incoming traffic is inspected through all available (built-in) detection 
engines.

Engines currently supported:
- linux64: this is an emulation engine based on the Unicorn engine, that 
  can identify potentially self-modifying linux/x86_64 shellcode
- win32: this is an emulation engine based on the Unicorn engine, that
  can identify potentially self-modifying windows/x86 shellcode
- qemu: this is an older emulation engine based on QEMU 0.12.4 that allows 
  detecting potentially self-modifying shellcode on the linux/x86 architecture
- libemu: this is an emulation engine based on a good old version of the 
  libemu "GetPC" detection code for x86 shellcode
- yara: this is a yara-based signature detection engine
- fnord: a signature detection engine for x86 fnord-based NOP sleds
- pyopty2: a python-based signature detection engine for meterpreter's 
  opty2 x86 NOP-sleds
- dummy: a dummy detection engine

See 'configure' options on how to configure specific engines to be built
into the 'seduce-agent' binary.

BUILD
-----
To build SEDUCE from source on a Debian system you will need:
- git gcc automake autoconf libtool autoconf-archive make
- libglib2.0-dev libconfuse-dev default-mysql-server libprelude-dev 
  libpreludedb-dev libpcap-dev libnet1-dev libnids-dev prelude-utils 
  libpreludedb7-mysql prelude-manager libyara-dev pkg-config cmake

Once all dependencies have been installed, do:
$ ./autogen.sh
$ ./configure
$ make

The 'configure' script builds by default only the 'linux64' engine.
To enable another engine simply use --enable-<engine> in the configure
parameters. 

For example:

$ ./configure --enable-win32 --disable-linux64

The above will configure the build for the Windows x86 detection engine, 
and will remove the default Linux x86_64 detection engine.

INSTALL
-------
# make install

Configuration files for agents and sensors are by default under 
'/usr/local/etc/seduce/'. Please edit these to suit your needs.

PRELUDE REGISTRATION
--------------------
You'll need two console sessions to configure prelude for SEDUCE.

[On the first console do]

# prelude-admin registration-server prelude-manager

This will output a password

[On the second console do]

# prelude-admin register seduce "idmef:w admin:r" localhost --uid 0 --gid 0

Enter the password here

[Then on the first console]

Answer yes for the registration approval

RUNNING
-------
Make sure prelude is running:

# systemctl start prelude-manager

Then start a SEDUCE sensor:

# /usr/local/sbin/seduce-sensor -c /usr/local/etc/seduce/sensor.conf

On another console start an agent:

# /usr/local/bin/seduce-agent -c /usr/local/etc/seduce/agent.conf

For a quick test of the detection capabilities of an engine, one can use the 
standalone 'seduce' binary (which does not involve NIDS work).

$ /usr/local/bin/seduce <engine> <payload_file>

To test the detection capabilities of an engine, you may find sample payloads 
in the 'agent/payloads' directory of this repository.

PROJECT HOMEPAGE
----------------
Latest code is available through:
git clone https://github.com/seduceIDS/seduce.git

Bug reports / push requests are welcome on the project github page.

## Datasets for PyML Detection Engine

The datasets used to train models for the PyML Detection Engine are listed below:

- [XSS Payload List](https://github.com/payloadbox/xss-payload-list)
- [SQL Injection Payload List](https://github.com/payloadbox/sql-injection-payload-list)
- [Command Injection Payload List](https://github.com/payloadbox/command-injection-payload-list)
- [Command Injection Wordlist](https://github.com/carlospolop/Auto_Wordlists/blob/main/wordlists/command_injection.txt)
- [HTTP Parameters Dataset](https://www.kaggle.com/datasets/evg3n1j/httpparamsdataset/?select=payload_full.csv)
- [SQL Injection Dataset](https://www.kaggle.com/datasets/sajid576/sql-injection-dataset)


LICENSE
-------
SEDUCE is available under a GPLv3 license (see COPYING).
