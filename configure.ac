#                                               -*- Autoconf -*-
# Process this file with autoconf to produce a configure script.

AC_PREREQ(2.61)
AC_INIT([SEDUCE], [0.0.3], [dimitris@census-labs.com])
AC_CONFIG_SRCDIR([sensor/data.h])
AC_CONFIG_HEADERS([config.h])
AM_INIT_AUTOMAKE

# Checks for programs.

AC_PROG_CC
AM_PROG_CC_C_O
AC_PROG_INSTALL
AC_PROG_MAKE_SET

# Checks for header files.

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS([arpa/inet.h inttypes.h limits.h malloc.h netdb.h netinet/in.h stddef.h stdlib.h string.h strings.h sys/ioctl.h sys/socket.h sys/time.h syslog.h unistd.h])

# Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_TYPE_SSIZE_T
AC_HEADER_TIME
AC_TYPE_UINT32_T
AC_TYPE_UINT64_T
AC_TYPE_UINT8_T

# Checks for library functions.
AC_FUNC_FORK
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MALLOC
AC_FUNC_MEMCMP
AC_FUNC_SELECT_ARGTYPES
AC_FUNC_STAT
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([alarm gethostbyname gettimeofday inet_ntoa memset munmap regcomp select socket strdup strerror strtol])

#  *** HANDLE HARD DEPENDENCIES *** 

## math library

AC_SEARCH_LIBS([random], [m],, AC_MSG_ERROR([missing math library]))
LIBM_LIBS="-lm"
AC_SUBST(LIBM_LIBS)

## posix thread library

AC_SEARCH_LIBS(pthread_create, pthread,, AC_MSG_ERROR([missing pthread library]))
AC_CHECK_HEADER(pthread.h,, AC_MSG_ERROR([pthread.h header file needed but not found]))
LIBPTHREAD_LIBS="-lpthread"
AC_SUBST(LIBPTHREAD_LIBS)

## glib 2.0 library

AC_SEARCH_LIBS(g_hash_table_new_full, glib-2.0,, AC_MSG_ERROR([missing glib library]))
# does AC_SUBST for GLIB_CFLAGS and GLIB_LIBS internally
AM_PATH_GLIB_2_0(2.0.0,,,gthread)
if test "$GLIB_LIBS" = ""; then
   AC_MSG_ERROR("GLIB 2.0 or later is required to build $PACKAGE_NAME")
fi

## confuse library 

AC_SEARCH_LIBS(cfg_set_validate_func, confuse,, AC_MSG_ERROR([missing confuse library]))
PKG_CHECK_MODULES(LIBCONFUSE, libconfuse,, 
 AC_MSG_ERROR("libconfuse is required to build $PACKAGE_NAME"))
AC_SUBST(LIBCONFUSE_CFLAGS)
AC_SUBST(LIBCONFUSE_LIBS)

## nids library

LIBNIDS_DEPENDENCIES="-lpcap -lgthread-2.0 -lnsl -lnet"
AC_SEARCH_LIBS(nids_register_udp, nids,, AC_MSG_ERROR(
 [libnids (or some dependency of it) is missing. Check config.log for errors.]),
 $LIBNIDS_DEPENDENCIES)
AC_CHECK_HEADER(nids.h,, AC_MSG_ERROR([nids.h header file needed but not found]))
LIBNIDS_LIBS="-lnids $LIBNIDS_DEPENDENCIES"
AC_SUBST(LIBNIDS_LIBS)

## prelude library

AC_SEARCH_LIBS(prelude_client_send_idmef, prelude,, AC_MSG_ERROR([missing prelude library]))
AC_CHECK_HEADERS(libprelude/prelude.h,, AC_MSG_ERROR([libprelude.h header file needed but not found!]))
LIBPRELUDE_CFLAGS=`libprelude-config --cflags`
LIBPRELUDE_LIBS=`libprelude-config --libs`
AC_SUBST(LIBPRELUDE_CFLAGS)
AC_SUBST(LIBPRELUDE_LIBS)

AC_ARG_WITH(config-dir,
  [AS_HELP_STRING([--with-config-dir=DIR],
    [Directory for config files])],
  sysconfdir="${withval}", sysconfdir="${sysconfdir}/seduce")

# *** AND NOW FOR THE SOFT DEPS ***

## our patched libqemu implementation (off by default)

use_qemu="no"
AC_ARG_ENABLE(qemu,
 [AS_HELP_STRING([--enable-qemu],
   [Enable older QEMU-based detection engine, requires a 2010 build system :) [off]])],
   [use_qemu=$enableval])

if test "$use_qemu" = "yes"; then
  AM_CONDITIONAL(HAVE_QEMU, true)
  AC_DEFINE(HAVE_QEMU, [1], [QEMU detection engine])
  QEMU_DIR="qemu-0.12.4"
  QEMU_CFLAGS="-I${QEMU_DIR}/ -I${QEMU_DIR}/linux-user/ -I${QEMU_DIR}/target-i386/ -I${QEMU_DIR}/i386-linux-user/ -I${QEMU_DIR}/fpu/ -I${QEMU_DIR}/linux-user/i386/"
  QEMU_LIBS="${QEMU_DIR}/i386-linux-user/libqemu.a ${QEMU_DIR}/libuser/libuser.a -lm -lrt" 
  AC_SUBST(QEMU_CFLAGS)
  AC_SUBST(QEMU_LIBS)
  AC_CONFIG_SUBDIRS([agent/qemu-0.12.4])
else
  AM_CONDITIONAL(HAVE_QEMU, false)
fi

# Unicorn-based linux/x64 emulation, on by default

use_linux64="yes"
AC_ARG_ENABLE(linux64,
 [AS_HELP_STRING([--enable-linux64],
   [Enable Unicorn-based linux/x64 detection engine [on]])],
   [use_linux64=$enableval])

if test "$use_linux64" = "yes"; then
  PKG_PROG_PKG_CONFIG([0.29])
  AC_CHECK_PROG(CMAKE,[cmake],[cmake],[no])
  test "$CMAKE" == "no" && AC_MSG_ERROR([Required program 'cmake' not found.])
  AM_CONDITIONAL(HAVE_LINUX_X86_64, true)
  AC_DEFINE(HAVE_LINUX_X86_64, [1], [Unicorn-based linux/x64 detection engine])
  UNICORN_DIR="unicorn"
  UNICORN_CFLAGS="-I./${UNICORN_DIR}/include"
  UNICORN_STATIC_LIB="./${UNICORN_DIR}/build/libunicorn.a"
  UNICORN_LIBS="${UNICORN_STATIC_LIB} -lpthread -lm -lrt" 
  AC_SUBST(UNICORN_CFLAGS)
  AC_SUBST(UNICORN_STATIC_LIB)
  AC_SUBST(UNICORN_LIBS)
#  AC_CONFIG_SUBDIRS([agent/unicorn])
else
  AM_CONDITIONAL(HAVE_LINUX_X86_64, false)
fi

use_win32="no"
AC_ARG_ENABLE(win32,
 [AS_HELP_STRING([--enable-win32],
   [Enable Unicorn-based windows/x86 detection engine [off]])],
   [use_win32=$enableval])

if test "$use_win32" = "yes"; then
  PKG_PROG_PKG_CONFIG([0.29])
  AC_CHECK_PROG(CMAKE,[cmake],[cmake],[no])
  test "$CMAKE" == "no" && AC_MSG_ERROR([Required program 'cmake' not found.])
  AC_SEARCH_LIBS(OPENSSL_init_ssl, ssl,, AC_MSG_ERROR([missing ssl library (openssl)]))
  AC_SEARCH_LIBS(EVP_DigestInit_ex, crypto,, AC_MSG_ERROR([missing crypto library (openssl)]))
  AC_CHECK_HEADERS(openssl/evp.h,, AC_MSG_ERROR([openssl/evp.h header file needed but not found!]))
  AC_CHECK_HEADERS(openssl/md5.h,, AC_MSG_ERROR([openssl/md5.h header file needed but not found!]))
  AM_CONDITIONAL(HAVE_WINDOWS_X86, true)
  AC_DEFINE(HAVE_WINDOWS_X86, [1], [Unicorn-based windows/x86 detection engine])
  UNICORN_DIR="unicorn"
  UNICORN_CFLAGS="-I./${UNICORN_DIR}/include"
  UNICORN_STATIC_LIB="./${UNICORN_DIR}/build/libunicorn.a"
  UNICORN_LIBS="${UNICORN_STATIC_LIB} -lpthread -lm -lrt" 
  READPE_DIR="readpe"
  LIBPE_CFLAGS="-I./${READPE_DIR}/lib/libpe/include"
  LIBPE_STATIC_LIB="./${READPE_DIR}/lib/libpe/build/libpe.a"
  LIBPE_LIBS="${LIBPE_STATIC_LIB} -lssl -lcrypto -lm"
  AC_SUBST(UNICORN_CFLAGS)
  AC_SUBST(UNICORN_STATIC_LIB)
  AC_SUBST(UNICORN_LIBS)
  AC_SUBST(LIBPE_CFLAGS)
  AC_SUBST(LIBPE_STATIC_LIB)
  AC_SUBST(LIBPE_LIBS)
#  AC_CONFIG_SUBDIRS([agent/unicorn])
else
  AM_CONDITIONAL(HAVE_WINDOWS_X86, false)
fi

## embedded libemu library detector (off by default)

use_libemu="no"
AC_ARG_ENABLE(libemu,
 [AS_HELP_STRING([--enable-libemu],
    [Enable libemu-based detection engine [off]])],
 [use_libemu=$enableval])

if test "$use_libemu" = "yes" ; then
  AM_CONDITIONAL(HAVE_LIBEMU, true)
  AC_DEFINE(HAVE_LIBEMU, [1], [libemu detection engine])
  LIBEMU_CFLAGS="-I./libemu/include"
  LIBEMU_STATIC_LIB="./libemu/src/.libs/libemu.a"
  LIBEMU_LIBS="${LIBEMU_STATIC_LIB}"
  AC_SUBST(LIBEMU_CFLAGS)
  AC_SUBST(LIBEMU_STATIC_LIB)
  AC_SUBST(LIBEMU_LIBS)
  AX_SUBDIRS_CONFIGURE([agent/libemu], [--disable-debug], [], [], [])
else
  AM_CONDITIONAL(HAVE_LIBEMU, false)
fi

## yara detector 

use_yara="no"
AC_CHECK_HEADER(yara.h,, 
    AC_MSG_ERROR([yara.h header file needed but not found]))
AC_ARG_ENABLE(yara,
 [AS_HELP_STRING([--enable-yara],
   [Enable yara detection engine [off]])],
 [use_yara=$enableval])

if test "$use_yara" = "yes" ; then
  AM_CONDITIONAL(HAVE_YARA, true)
  AC_DEFINE(HAVE_YARA, [1], [yara detection engine])
  LIBYARA_LIBS="-lyara" 
  AC_SUBST(LIBYARA_LIBS)
else
  AM_CONDITIONAL(HAVE_YARA, false)
fi

## fnord nop detector (off by default) 

use_fnord="no"
AC_ARG_ENABLE(fnord,
 [AS_HELP_STRING([--enable-fnord],
   [Enable fnord-like nop detection engine [off]])],
 [use_fnord=$enableval])

if test "$use_fnord" = "yes" ; then
  AM_CONDITIONAL(HAVE_FNORD, true)
  AC_DEFINE(HAVE_FNORD, [1], [fnord detection engine])
else
  AM_CONDITIONAL(HAVE_FNORD, false)
fi

## pyopty2 detection engine (off by default)

use_pyopty2="no"
AC_ARG_ENABLE(pyopty2,
  [AS_HELP_STRING([--enable-pyopty2],
    [Enable pyopty2 detection engine [off]])],
  [use_pyopty2=$enableval])

if test "$use_pyopty2" = "yes" ; then
  AC_CHECK_PROG(PYTHON_CONFIG, [python-config], here, absent)

  if test "$PYTHON_CONFIG" = "here" ; then
    LIBPYTHON_CFLAGS=`python-config --cflags`
    LIBPYTHON_LIBS=`python-config --libs`
    # yes, this is ugly but it's how you specify which include-dirs
    # will be used during the conftest build process
    CPPFLAGS=`python-config --includes`
  else
    AC_MSG_ERROR([python-config not found!])
  fi

  AM_PATH_PYTHON(2.5.0,, 
    AC_MSG_ERROR([Python interpreter not found or too old (must be of version 2.5.x)]))
  AC_SEARCH_LIBS(PyImport_Import, python2.5,, 
    AC_MSG_ERROR([missing python2.5 library]))
  AC_CHECK_HEADER(Python.h,, 
    AC_MSG_ERROR([Python.h header file needed but not found]))

  AM_CONDITIONAL(HAVE_PYOPTY2, true)
  AC_DEFINE(HAVE_PYOPTY2, [1], [pyopty2 detection engine])
  AC_SUBST(LIBPYTHON_CFLAGS)
  AC_SUBST(LIBPYTHON_LIBS)
  # reset it back to normal
  CPPFLAGS=
else
  AM_CONDITIONAL(HAVE_PYOPTY2, false)
fi

## pyml detection engine (off by default)
use_pyml="no"
AC_ARG_ENABLE([pyml],
  [AS_HELP_STRING([--enable-pyml],
    [Enable PYML detection engine [off]])],
  [use_pyml=$enableval])

AC_ARG_WITH([max-anomalies],
  [AS_HELP_STRING([--with-max-anomalies],
    [Specify the maximum number of anomalies the detection engine can detect [default=2]])],
  [max_anomalies=${withval}],
  [max_anomalies=2])  # Default value if not specified

if test "$use_pyml" = "yes" ; then
  AC_CHECK_PROG(PYTHON3_CONFIG, [python3-config], here, absent)

  if test "$PYTHON3_CONFIG" = "here" ; then
    LIBPYTHON_CFLAGS=`python3-config --cflags --embed`
    LIBPYTHON_LIBS=`python3-config --embed --libs`
    CPPFLAGS=`python3-config --includes`
  else
    AC_MSG_ERROR([python3-config not found!])
  fi

  # Check for Python version 3.10 or higher
  AC_MSG_CHECKING([for Python version >= 3.10])
  PYTHON_VERSION=$(python3 --version 2>&1 | awk '{print $2}')
  PYTHON_MAJOR_VERSION=$(echo $PYTHON_VERSION | cut -d. -f1)
  PYTHON_MINOR_VERSION=$(echo $PYTHON_VERSION | cut -d. -f2)
  if test $PYTHON_MAJOR_VERSION -lt 3 || (test $PYTHON_MAJOR_VERSION -eq 3 && test $PYTHON_MINOR_VERSION -lt 10); then
    AC_MSG_ERROR([Python version 3.10 or higher is required])
  else
    AC_MSG_RESULT([$PYTHON_VERSION])
  fi

  AC_DEFINE([HAVE_PYML], [1], [Define if PYML engine is enabled])
  AC_DEFINE_UNQUOTED([MAX_ANOMALIES], [$max_anomalies], [Define the maximum number of anomalies])
  AC_SUBST(max_anomalies)
  AM_CONDITIONAL([HAVE_PYML], [true])
  AC_SUBST(LIBPYTHON_CFLAGS)
  AC_SUBST(LIBPYTHON_LIBS)
  # reset it back to normal
  CPPFLAGS=
else
  AM_CONDITIONAL([HAVE_PYML], [false])
fi

## dummy detection engine (off by default) 

use_dummy="no"
AC_ARG_ENABLE(dummy,
  [AS_HELP_STRING([--enable-dummy],
    [Enable dummy detection engine [off]])],
  [use_dummy=$enableval])

if test "$use_dummy" = "yes" ; then
  AM_CONDITIONAL(HAVE_DUMMY, true)
  AC_DEFINE(HAVE_DUMMY, [1], [dummy detection engine])
else
  AM_CONDITIONAL(HAVE_DUMMY, false)
fi

# reset LIBS, because it has automatically appended
# all libs discovered by AC_SEARCH_LIBS
# This results in adding unrelated libs to executables
LIBS=

AC_CONFIG_FILES([Makefile
                sensor/Makefile
     		agent/Makefile
     		doc/Makefile])
AC_OUTPUT
